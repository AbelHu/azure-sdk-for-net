// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Iot.Hub.Service.Models;

namespace Azure.Iot.Hub.Service
{
    internal partial class ServiceRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public ServiceRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2020-03-13")
        {
            endpoint ??= new Uri("https://fully-qualified-iothubname.azure-devices.net");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateSendDeviceMessageRequest(string iothubTo, string messageId, string iothubMessageSchema, string iothubContentType, string iothubContentEncoding, string iothubCreationTimeUtc, string absoluteExpiryTime, string correlationId, Enum18 iothubAck, object payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/messages/deviceBound", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("iothub-to", iothubTo);
            request.Headers.Add("message-id", messageId);
            request.Headers.Add("iothub-message-schema", iothubMessageSchema);
            request.Headers.Add("iothub-content-type", iothubContentType);
            request.Headers.Add("iothub-content-encoding", iothubContentEncoding);
            request.Headers.Add("iothub-creation-time-utc", iothubCreationTimeUtc);
            request.Headers.Add("absolute-expiry-time", absoluteExpiryTime);
            request.Headers.Add("correlation-id", correlationId);
            request.Headers.Add("iothub-ack", iothubAck.ToString());
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(payload);
            request.Content = content;
            return message;
        }

        /// <summary> Send a cloud-to-device message to device. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-c2d for more information. </summary>
        /// <param name="iothubTo"> The destination of the message. </param>
        /// <param name="messageId"> The unique identifier for the cloud-to-device message being sent. </param>
        /// <param name="iothubMessageSchema"> The schema of the message payload content. </param>
        /// <param name="iothubContentType"> The content type of the message payload. </param>
        /// <param name="iothubContentEncoding"> The content encoding type of the message payload. </param>
        /// <param name="iothubCreationTimeUtc"> Custom date property set by the originator of the message (in UTC). </param>
        /// <param name="absoluteExpiryTime"> The time when this message is considered expired (in UTC). </param>
        /// <param name="correlationId"> Used in message responses and feedback. </param>
        /// <param name="iothubAck"> Indicates whether consumption or expiration of the message should post data to the feedback queue. For explanation on possible values, see https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-c2d#message-feedback. </param>
        /// <param name="payload"> The cloud-to-device message payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iothubTo"/>, <paramref name="messageId"/>, <paramref name="iothubMessageSchema"/>, <paramref name="iothubContentType"/>, <paramref name="iothubContentEncoding"/>, <paramref name="iothubCreationTimeUtc"/>, <paramref name="absoluteExpiryTime"/>, <paramref name="correlationId"/>, or <paramref name="payload"/> is null. </exception>
        public async Task<Response> SendDeviceMessageAsync(string iothubTo, string messageId, string iothubMessageSchema, string iothubContentType, string iothubContentEncoding, string iothubCreationTimeUtc, string absoluteExpiryTime, string correlationId, Enum18 iothubAck, object payload, CancellationToken cancellationToken = default)
        {
            if (iothubTo == null)
            {
                throw new ArgumentNullException(nameof(iothubTo));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (iothubMessageSchema == null)
            {
                throw new ArgumentNullException(nameof(iothubMessageSchema));
            }
            if (iothubContentType == null)
            {
                throw new ArgumentNullException(nameof(iothubContentType));
            }
            if (iothubContentEncoding == null)
            {
                throw new ArgumentNullException(nameof(iothubContentEncoding));
            }
            if (iothubCreationTimeUtc == null)
            {
                throw new ArgumentNullException(nameof(iothubCreationTimeUtc));
            }
            if (absoluteExpiryTime == null)
            {
                throw new ArgumentNullException(nameof(absoluteExpiryTime));
            }
            if (correlationId == null)
            {
                throw new ArgumentNullException(nameof(correlationId));
            }
            if (payload == null)
            {
                throw new ArgumentNullException(nameof(payload));
            }

            using var message = CreateSendDeviceMessageRequest(iothubTo, messageId, iothubMessageSchema, iothubContentType, iothubContentEncoding, iothubCreationTimeUtc, absoluteExpiryTime, correlationId, iothubAck, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Send a cloud-to-device message to device. See https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-c2d for more information. </summary>
        /// <param name="iothubTo"> The destination of the message. </param>
        /// <param name="messageId"> The unique identifier for the cloud-to-device message being sent. </param>
        /// <param name="iothubMessageSchema"> The schema of the message payload content. </param>
        /// <param name="iothubContentType"> The content type of the message payload. </param>
        /// <param name="iothubContentEncoding"> The content encoding type of the message payload. </param>
        /// <param name="iothubCreationTimeUtc"> Custom date property set by the originator of the message (in UTC). </param>
        /// <param name="absoluteExpiryTime"> The time when this message is considered expired (in UTC). </param>
        /// <param name="correlationId"> Used in message responses and feedback. </param>
        /// <param name="iothubAck"> Indicates whether consumption or expiration of the message should post data to the feedback queue. For explanation on possible values, see https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-c2d#message-feedback. </param>
        /// <param name="payload"> The cloud-to-device message payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="iothubTo"/>, <paramref name="messageId"/>, <paramref name="iothubMessageSchema"/>, <paramref name="iothubContentType"/>, <paramref name="iothubContentEncoding"/>, <paramref name="iothubCreationTimeUtc"/>, <paramref name="absoluteExpiryTime"/>, <paramref name="correlationId"/>, or <paramref name="payload"/> is null. </exception>
        public Response SendDeviceMessage(string iothubTo, string messageId, string iothubMessageSchema, string iothubContentType, string iothubContentEncoding, string iothubCreationTimeUtc, string absoluteExpiryTime, string correlationId, Enum18 iothubAck, object payload, CancellationToken cancellationToken = default)
        {
            if (iothubTo == null)
            {
                throw new ArgumentNullException(nameof(iothubTo));
            }
            if (messageId == null)
            {
                throw new ArgumentNullException(nameof(messageId));
            }
            if (iothubMessageSchema == null)
            {
                throw new ArgumentNullException(nameof(iothubMessageSchema));
            }
            if (iothubContentType == null)
            {
                throw new ArgumentNullException(nameof(iothubContentType));
            }
            if (iothubContentEncoding == null)
            {
                throw new ArgumentNullException(nameof(iothubContentEncoding));
            }
            if (iothubCreationTimeUtc == null)
            {
                throw new ArgumentNullException(nameof(iothubCreationTimeUtc));
            }
            if (absoluteExpiryTime == null)
            {
                throw new ArgumentNullException(nameof(absoluteExpiryTime));
            }
            if (correlationId == null)
            {
                throw new ArgumentNullException(nameof(correlationId));
            }
            if (payload == null)
            {
                throw new ArgumentNullException(nameof(payload));
            }

            using var message = CreateSendDeviceMessageRequest(iothubTo, messageId, iothubMessageSchema, iothubContentType, iothubContentEncoding, iothubCreationTimeUtc, absoluteExpiryTime, correlationId, iothubAck, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
